"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiActions: () => (/* binding */ apiActions),\n/* harmony export */   apiMatches: () => (/* binding */ apiMatches),\n/* harmony export */   apiPlayers: () => (/* binding */ apiPlayers),\n/* harmony export */   apiRequest: () => (/* binding */ apiRequest),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getPendingRequests: () => (/* binding */ getPendingRequests),\n/* harmony export */   initializeOfflineSupport: () => (/* binding */ initializeOfflineSupport),\n/* harmony export */   setupOfflineSync: () => (/* binding */ setupOfflineSync),\n/* harmony export */   syncPendingRequests: () => (/* binding */ syncPendingRequests)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n\n// Klucz do przechowywania oczekujących żądań w localStorage\nconst PENDING_REQUESTS_KEY = 'packing_analyzer_pending_requests';\n// Sprawdzenie, czy aplikacja jest online\nconst isOnline = ()=>{\n    return navigator.onLine;\n};\n// Obsługa żądań API z mechanizmem offline\nconst apiRequest = async function(url) {\n    let method = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'GET', body = arguments.length > 2 ? arguments[2] : void 0;\n    // Jeśli jesteśmy online, wysyłamy żądanie normalnie\n    if (isOnline()) {\n        try {\n            const options = {\n                method,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            };\n            if (body && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {\n                options.body = JSON.stringify(body);\n            }\n            const response = await fetch(url, options);\n            if (!response.ok) {\n                throw new Error(\"API error: \".concat(response.status));\n            }\n            return response.json();\n        } catch (error) {\n            console.error('API request failed:', error);\n            // Jeśli żądanie nie powiodło się (np. z powodu nagłej utraty połączenia),\n            // zapisujemy je do oczekujących żądań\n            if (method !== 'GET') {\n                savePendingRequest(url, method, body);\n            }\n            throw error;\n        }\n    } else {\n        // Jeśli jesteśmy offline i jest to żądanie modyfikujące dane\n        if (method !== 'GET') {\n            savePendingRequest(url, method, body);\n            // Zwracamy mock odpowiedzi\n            return {\n                success: true,\n                offline: true,\n                message: 'Żądanie zostało zapisane i zostanie wysłane, gdy połączenie zostanie przywrócone'\n            };\n        } else {\n            // Dla operacji GET możemy próbować pobrać dane z cache\n            throw new Error('Brak połączenia z internetem. Operacje odczytu nie są dostępne w trybie offline.');\n        }\n    }\n};\n// Zapisanie oczekującego żądania do localStorage\nconst savePendingRequest = (url, method, body)=>{\n    const pendingRequests = getPendingRequests();\n    const newRequest = {\n        id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n        url,\n        method,\n        body,\n        timestamp: Date.now()\n    };\n    pendingRequests.push(newRequest);\n    localStorage.setItem(PENDING_REQUESTS_KEY, JSON.stringify(pendingRequests));\n    console.log(\"Zapisano żądanie offline: \".concat(method, \" \").concat(url));\n};\n// Pobranie listy oczekujących żądań\nconst getPendingRequests = ()=>{\n    const requestsJson = localStorage.getItem(PENDING_REQUESTS_KEY);\n    return requestsJson ? JSON.parse(requestsJson) : [];\n};\n// Synchronizacja oczekujących żądań po przywróceniu połączenia\nconst syncPendingRequests = async ()=>{\n    if (!isOnline()) {\n        console.log('Nie można zsynchronizować żądań: brak połączenia');\n        return;\n    }\n    const pendingRequests = getPendingRequests();\n    if (pendingRequests.length === 0) {\n        return;\n    }\n    console.log(\"Rozpoczęto synchronizację \".concat(pendingRequests.length, \" oczekujących żądań\"));\n    // Sortujemy żądania według znacznika czasu\n    const sortedRequests = [\n        ...pendingRequests\n    ].sort((a, b)=>a.timestamp - b.timestamp);\n    // Tworzymy nową listę oczekujących żądań, aktualizowaną w przypadku niepowodzeń\n    const newPendingRequests = [];\n    for (const request of sortedRequests){\n        try {\n            const options = {\n                method: request.method,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            };\n            if (request.body) {\n                options.body = JSON.stringify(request.body);\n            }\n            const response = await fetch(request.url, options);\n            if (!response.ok) {\n                throw new Error(\"API error: \".concat(response.status));\n            }\n            console.log(\"Zsynchronizowano żądanie: \".concat(request.method, \" \").concat(request.url));\n        } catch (error) {\n            console.error(\"Nie udało się zsynchronizować żądania: \".concat(request.method, \" \").concat(request.url), error);\n            // Zachowaj żądanie, które nie powiodło się, do kolejnej próby\n            newPendingRequests.push(request);\n        }\n    }\n    // Zapisz zaktualizowaną listę oczekujących żądań\n    localStorage.setItem(PENDING_REQUESTS_KEY, JSON.stringify(newPendingRequests));\n    if (newPendingRequests.length === 0) {\n        console.log('Wszystkie żądania zostały zsynchronizowane');\n    } else {\n        console.log(\"Pozostało \".concat(newPendingRequests.length, \" żądań do synchronizacji\"));\n    }\n};\n// Nasłuchiwanie zmiany stanu połączenia\nconst setupOfflineSync = ()=>{\n    if (true) {\n        window.addEventListener('online', ()=>{\n            console.log('Przywrócono połączenie. Rozpoczynam synchronizację.');\n            syncPendingRequests();\n        });\n        window.addEventListener('offline', ()=>{\n            console.log('Utracono połączenie. Aplikacja działa w trybie offline.');\n        });\n    }\n};\n// Sprawdzanie i synchronizacja przy starcie aplikacji\nconst initializeOfflineSupport = ()=>{\n    setupOfflineSync();\n    // Jeśli jesteśmy online przy starcie aplikacji, spróbujmy zsynchronizować oczekujące żądania\n    if (isOnline()) {\n        syncPendingRequests();\n    }\n};\n// Specjalistyczne funkcje API\nconst apiActions = {\n    // Pobieranie akcji dla określonego meczu\n    getActions: (matchId)=>{\n        const url = matchId ? \"/api/actions?matchId=\".concat(matchId) : '/api/actions';\n        return apiRequest(url, 'GET');\n    },\n    // Zapisywanie nowej akcji\n    saveAction: (actionData)=>{\n        return apiRequest('/api/actions', 'POST', actionData);\n    },\n    // Usuwanie akcji\n    deleteAction: (actionId)=>{\n        return apiRequest(\"/api/actions/\".concat(actionId), 'DELETE');\n    },\n    // Usuwanie wszystkich akcji dla meczu\n    deleteAllActions: (matchId)=>{\n        return apiRequest(\"/api/actions?matchId=\".concat(matchId), 'DELETE');\n    }\n};\nconst apiMatches = {\n    // Pobieranie meczów dla określonego zespołu\n    getMatches: (teamId)=>{\n        const url = teamId ? \"/api/matches?teamId=\".concat(teamId) : '/api/matches';\n        return apiRequest(url, 'GET');\n    },\n    // Zapisywanie nowego meczu\n    saveMatch: (matchData)=>{\n        return apiRequest('/api/matches', 'POST', matchData);\n    },\n    // Usuwanie meczu\n    deleteMatch: (matchId)=>{\n        return apiRequest(\"/api/matches/\".concat(matchId), 'DELETE');\n    }\n};\nconst apiPlayers = {\n    // Pobieranie zawodników dla określonego zespołu\n    getPlayers: (teamId)=>{\n        const url = teamId ? \"/api/players?teamId=\".concat(teamId) : '/api/players';\n        return apiRequest(url, 'GET');\n    },\n    // Zapisywanie nowego zawodnika\n    savePlayer: (playerData)=>{\n        return apiRequest('/api/players', 'POST', playerData);\n    },\n    // Aktualizacja zawodnika\n    updatePlayer: (playerId, playerData)=>{\n        return apiRequest(\"/api/players/\".concat(playerId), 'PUT', playerData);\n    },\n    // Usuwanie zawodnika\n    deletePlayer: (playerId)=>{\n        return apiRequest(\"/api/players/\".concat(playerId), 'DELETE');\n    }\n};\n// Eksportujemy API\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    apiRequest,\n    getPendingRequests,\n    syncPendingRequests,\n    initializeOfflineSupport,\n    setupOfflineSync,\n    apiActions,\n    apiMatches,\n    apiPlayers\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});