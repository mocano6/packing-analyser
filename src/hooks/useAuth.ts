import { useState, useEffect } from "react";
import { db } from "@/lib/firebase";
import { collection, doc, getDoc, setDoc, deleteDoc } from "firebase/firestore";
import { compareHash, hashPassword } from "@/utils/password";
import { toast } from "react-hot-toast";
import { handleFirestoreError } from "@/utils/firestoreErrorHandler";

// Klucz localStorage do przechowywania tokenu autentykacji
const AUTH_TOKEN_KEY = "packing_app_auth_token";
// Klucz do obej≈õcia uwierzytelniania - u≈ºywany w trybie deweloperskim gdy Firebase Auth ma problemy
const BYPASS_AUTH_KEY = "packing_app_bypass_auth";
// Czas wa≈ºno≈õci tokenu (24 godziny)
const TOKEN_VALIDITY_MS = 24 * 60 * 60 * 1000;

interface UseAuthReturnType {
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (password: string) => Promise<boolean>;
  logout: () => void;
  setPassword: (newPassword: string) => Promise<boolean>;
  bypassAuth: () => void; // Funkcja do obej≈õcia uwierzytelniania (tylko dla deweloper√≥w)
  resetPassword: () => Promise<boolean>; // Funkcja do resetowania has≈Ça
  isPasswordSet: boolean; // Flaga wskazujƒÖca czy has≈Ço jest ustawione
}

export function useAuth(): UseAuthReturnType {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isPasswordSet, setIsPasswordSet] = useState<boolean>(false);

  // Funkcja do obej≈õcia uwierzytelniania
  const bypassAuth = () => {
    localStorage.setItem(BYPASS_AUTH_KEY, 'true');
    setIsAuthenticated(true);
    console.log('‚ö†Ô∏è Uwierzytelnianie obej≈õcione - tryb produkcyjny aktywny');
    toast.success("Aktywowano tryb deweloperski");
  };

  // Automatycznie aktywuj tryb obej≈õcia dla wersji produkcyjnej
  useEffect(() => {
    console.log('üîÑ Inicjalizacja uwierzytelniania...');
    
    // Najpierw sprawd≈∫, czy tryb obej≈õcia jest ju≈º aktywny
    const isBypassActive = localStorage.getItem(BYPASS_AUTH_KEY) === 'true';
    if (isBypassActive) {
      console.log('‚ö†Ô∏è Tryb obej≈õcia uwierzytelniania jest ju≈º aktywny');
      setIsAuthenticated(true);
      setIsLoading(false);
      return;
    }
    
    // Aktywuj tryb obej≈õcia i zako≈Ñcz ≈Çadowanie
    bypassAuth();
    setIsLoading(false);
  }, []);

  // Logowanie z u≈ºyciem has≈Ça
  const login = async (password: string): Promise<boolean> => {
    try {
      setIsLoading(true);
      
      // Je≈õli obej≈õcie uwierzytelniania jest aktywne, od razu zwr√≥ƒá true
      if (localStorage.getItem(BYPASS_AUTH_KEY) === 'true') {
        setIsAuthenticated(true);
        return true;
      }
      
      // Sprawd≈∫, czy uproszczone has≈Ço deweloperskie jest aktywne
      if (password === 'dev123') {
        console.log('üîì Logowanie z u≈ºyciem uproszczonego has≈Ça deweloperskiego');
        // Generowanie prostego tokenu z timestampem
        const token = `auth_${Date.now()}`;
        localStorage.setItem(AUTH_TOKEN_KEY, token);
        setIsAuthenticated(true);
        toast.success("Zalogowano z has≈Çem deweloperskim");
        return true;
      }
      
      // Pobierz has≈Ço z Firebase
      const settingsRef = doc(db, "settings", "password");
      const settingsDoc = await getDoc(settingsRef).catch(error => {
        handleFirestoreError(error, db);
        toast.error("B≈ÇƒÖd po≈ÇƒÖczenia z bazƒÖ danych. Proszƒô spr√≥bowaƒá ponownie.");
        throw error;
      });
      
      if (!settingsDoc.exists()) {
        // Je≈õli dokument z has≈Çem nie istnieje, pierwszy u≈ºytkownik mo≈ºe ustawiƒá has≈Ço
        console.log('‚ÑπÔ∏è Dokument has≈Ça nie istnieje - ustawianie pierwszego has≈Ça');
        const success = await setPassword(password);
        if (success) {
          toast.success("Ustawiono nowe has≈Ço i zalogowano pomy≈õlnie");
        }
        return success;
      }
      
      const { hash, salt } = settingsDoc.data();
      
      // Por√≥wnaj has≈Ço
      const isValid = await compareHash(password, hash, salt);
      
      if (isValid) {
        // Generowanie prostego tokenu z timestampem
        const token = `auth_${Date.now()}`;
        localStorage.setItem(AUTH_TOKEN_KEY, token);
        setIsAuthenticated(true);
        toast.success("Zalogowano pomy≈õlnie");
        return true;
      }
      
      toast.error("Nieprawid≈Çowe has≈Ço");
      return false;
    } catch (error) {
      console.error("B≈ÇƒÖd podczas logowania:", error);
      
      // W przypadku b≈Çƒôdu, je≈õli podane jest uproszczone has≈Ço deweloperskie, zaloguj
      if (password === 'dev123') {
        console.log('üîì Logowanie awaryjne z u≈ºyciem uproszczonego has≈Ça deweloperskiego po b≈Çƒôdzie');
        const token = `auth_${Date.now()}`;
        localStorage.setItem(AUTH_TOKEN_KEY, token);
        setIsAuthenticated(true);
        toast.success("Zalogowano awaryjnie z has≈Çem deweloperskim");
        return true;
      }
      
      toast.error("B≈ÇƒÖd podczas logowania. Spr√≥buj ponownie.");
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // Wylogowanie
  const logout = () => {
    localStorage.removeItem(AUTH_TOKEN_KEY);
    // Nie usuwamy BYPASS_AUTH_KEY przy wylogowaniu, aby deweloper m√≥g≈Ç nadal pracowaƒá
    setIsAuthenticated(false);
    toast.success("Wylogowano pomy≈õlnie");
  };

  // Ustawienie nowego has≈Ça
  const setPassword = async (newPassword: string): Promise<boolean> => {
    try {
      setIsLoading(true);
      
      // Je≈õli obej≈õcie uwierzytelniania jest aktywne, od razu zwr√≥ƒá true
      if (localStorage.getItem(BYPASS_AUTH_KEY) === 'true') {
        setIsAuthenticated(true);
        return true;
      }
      
      // Haszowanie has≈Ça
      const { hash, salt } = await hashPassword(newPassword);
      
      // Zapisz w Firebase
      const settingsRef = doc(db, "settings", "password");
      await setDoc(settingsRef, { hash, salt, updatedAt: new Date() }).catch(error => {
        handleFirestoreError(error, db);
        toast.error("B≈ÇƒÖd zapisu has≈Ça. Spr√≥buj ponownie.");
        throw error;
      });
      
      // Automatyczne zalogowanie po ustawieniu has≈Ça
      const token = `auth_${Date.now()}`;
      localStorage.setItem(AUTH_TOKEN_KEY, token);
      setIsAuthenticated(true);
      setIsPasswordSet(true);
      
      return true;
    } catch (error) {
      console.error("B≈ÇƒÖd podczas ustawiania has≈Ça:", error);
      
      // W przypadku b≈Çƒôdu podczas ustawiania has≈Ça, aktywuj tryb deweloperski
      if (newPassword === 'dev123') {
        console.log('üîì Aktywacja trybu deweloperskiego po b≈Çƒôdzie ustawiania has≈Ça');
        bypassAuth();
        return true;
      }
      
      return false;
    } finally {
      setIsLoading(false);
    }
  };
  
  // Funkcja do resetowania has≈Ça
  const resetPassword = async (): Promise<boolean> => {
    try {
      setIsLoading(true);
      console.log('üîÑ Resetowanie has≈Ça...');
      
      // Usu≈Ñ token uwierzytelniania
      localStorage.removeItem(AUTH_TOKEN_KEY);
      
      // Usu≈Ñ dokument has≈Ça w Firebase
      const settingsRef = doc(db, "settings", "password");
      const settingsDoc = await getDoc(settingsRef).catch(error => {
        handleFirestoreError(error, db);
        throw error;
      });
      
      if (settingsDoc.exists()) {
        await deleteDoc(settingsRef).catch(error => {
          handleFirestoreError(error, db);
          throw error;
        });
        console.log('‚úÖ Dokument has≈Ça zosta≈Ç usuniƒôty z Firebase');
      } else {
        console.log('‚ÑπÔ∏è Dokument has≈Ça nie istnieje w Firebase');
      }
      
      // Wyloguj u≈ºytkownika
      setIsAuthenticated(false);
      setIsPasswordSet(false);
      
      toast.success("Has≈Ço zosta≈Ço zresetowane. Przy nastƒôpnym logowaniu nale≈ºy ustawiƒá nowe has≈Ço.");
      console.log('‚úÖ Has≈Ço zosta≈Ço zresetowane. Przy nastƒôpnym logowaniu mo≈ºna ustawiƒá nowe has≈Ço.');
      return true;
    } catch (error) {
      console.error('‚ùå B≈ÇƒÖd podczas resetowania has≈Ça:', error);
      toast.error("B≈ÇƒÖd podczas resetowania has≈Ça. Spr√≥buj ponownie.");
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return { 
    isAuthenticated, 
    isLoading, 
    login, 
    logout, 
    setPassword, 
    bypassAuth, 
    resetPassword,
    isPasswordSet 
  };
} 