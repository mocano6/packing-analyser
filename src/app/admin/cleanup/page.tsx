'use client';

import { useState } from 'react';
import { collection, getDocs, doc, updateDoc, deleteField } from 'firebase/firestore';
import { getDB } from '@/lib/firebase';
import { useAuth } from '@/hooks/useAuth';
import styles from './cleanup.module.css';

interface CleanupStats {
  totalPlayers: number;
  playersWithActionsSent: number;
  playersWithActionsReceived: number;
  playersWithMatchesInfo: number;
  cleanedPlayers: number;
  processedPlayers: number;
}

export default function CleanupPage() {
  const { isAdmin } = useAuth();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [isCleaning, setIsCleaning] = useState(false);
  const [analysisResults, setAnalysisResults] = useState<CleanupStats | null>(null);
  const [cleanupResults, setCleanupResults] = useState<CleanupStats | null>(null);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const analyzePlayerData = async () => {
    if (!isAdmin) {
      alert('Tylko administratorzy mogƒÖ analizowaƒá dane');
      return;
    }

    setIsAnalyzing(true);
    setLogs([]);
    addLog('üîç Rozpoczynam analizƒô danych zawodnik√≥w...');

    try {
      const playersCollection = collection(getDB(), 'players');
      const playersSnapshot = await getDocs(playersCollection);
      
      addLog(`üìã Znaleziono ${playersSnapshot.size} zawodnik√≥w`);

      let playersWithActionsSent = 0;
      let playersWithActionsReceived = 0;
      let playersWithMatchesInfo = 0;
      let totalActions = 0;

      playersSnapshot.docs.forEach(doc => {
        const data = doc.data();
        
        if (data.actionsSent) {
          playersWithActionsSent++;
          totalActions += Object.keys(data.actionsSent).length;
          addLog(`üîç ${data.firstName} ${data.lastName} - actionsSent: ${Object.keys(data.actionsSent).length} mecz√≥w`);
        }
        
        if (data.actionsReceived) {
          playersWithActionsReceived++;
          totalActions += Object.keys(data.actionsReceived).length;
          addLog(`üîç ${data.firstName} ${data.lastName} - actionsReceived: ${Object.keys(data.actionsReceived).length} mecz√≥w`);
        }
        
        if (data.matchesInfo) {
          playersWithMatchesInfo++;
          totalActions += Object.keys(data.matchesInfo).length;
          addLog(`üîç ${data.firstName} ${data.lastName} - matchesInfo: ${Object.keys(data.matchesInfo).length} mecz√≥w`);
        }
      });

      const results: CleanupStats = {
        totalPlayers: playersSnapshot.size,
        playersWithActionsSent,
        playersWithActionsReceived,
        playersWithMatchesInfo,
        cleanedPlayers: 0,
        processedPlayers: 0
      };

      setAnalysisResults(results);
      
      addLog(`üìä Analiza zako≈Ñczona:`);
      addLog(`   ‚Ä¢ Zawodnicy z actionsSent: ${playersWithActionsSent}`);
      addLog(`   ‚Ä¢ Zawodnicy z actionsReceived: ${playersWithActionsReceived}`);
      addLog(`   ‚Ä¢ Zawodnicy z matchesInfo: ${playersWithMatchesInfo}`);
      addLog(`   ‚Ä¢ ≈ÅƒÖcznie duplikat√≥w do usuniƒôcia: ${totalActions}`);
      
      if (playersWithActionsSent === 0 && playersWithActionsReceived === 0 && playersWithMatchesInfo === 0) {
        addLog('‚úÖ Baza danych jest ju≈º czysta!');
      } else {
        addLog('‚ö†Ô∏è  Znaleziono dane do wyczyszczenia');
      }

    } catch (error) {
      console.error('B≈ÇƒÖd analizy:', error);
      addLog(`‚ùå B≈ÇƒÖd analizy: ${error}`);
    } finally {
      setIsAnalyzing(false);
    }
  };

  const cleanupPlayerData = async () => {
    if (!isAdmin) {
      alert('Tylko administratorzy mogƒÖ czy≈õciƒá dane');
      return;
    }

    if (!analysisResults || (analysisResults.playersWithActionsSent === 0 && analysisResults.playersWithActionsReceived === 0 && analysisResults.playersWithMatchesInfo === 0)) {
      alert('Brak danych do wyczyszczenia lub nie wykonano analizy');
      return;
    }

    const totalPlayersToClean = analysisResults.playersWithActionsSent + analysisResults.playersWithActionsReceived + analysisResults.playersWithMatchesInfo;
    const confirmed = confirm(
      `Czy na pewno chcesz usunƒÖƒá duplikaty danych z ${totalPlayersToClean} zawodnik√≥w?\n\n` +
      `‚Ä¢ actionsSent: ${analysisResults.playersWithActionsSent} zawodnik√≥w\n` +
      `‚Ä¢ actionsReceived: ${analysisResults.playersWithActionsReceived} zawodnik√≥w\n` +
      `‚Ä¢ matchesInfo: ${analysisResults.playersWithMatchesInfo} zawodnik√≥w\n\n` +
      'Ta operacja jest nieodwracalna!'
    );

    if (!confirmed) return;

    setIsCleaning(true);
    setLogs([]);
    addLog('üßπ Rozpoczynam czyszczenie danych zawodnik√≥w...');

    try {
      const playersCollection = collection(getDB(), 'players');
      const playersSnapshot = await getDocs(playersCollection);
      
      let processedCount = 0;
      let cleanedCount = 0;

      for (const playerDoc of playersSnapshot.docs) {
        const playerData = playerDoc.data();
        const playerId = playerDoc.id;
        
        const hasActionsSent = playerData.actionsSent !== undefined;
        const hasActionsReceived = playerData.actionsReceived !== undefined;
        const hasMatchesInfo = playerData.matchesInfo !== undefined;
        
        if (hasActionsSent || hasActionsReceived || hasMatchesInfo) {
          addLog(`üîÑ Czyszczƒô zawodnika: ${playerData.firstName} ${playerData.lastName}`);
          
          const updates: any = {};
          
          if (hasActionsSent) {
            updates.actionsSent = deleteField();
            addLog(`  ‚ùå Usuwam actionsSent (${Object.keys(playerData.actionsSent || {}).length} mecz√≥w)`);
          }
          
          if (hasActionsReceived) {
            updates.actionsReceived = deleteField();
            addLog(`  ‚ùå Usuwam actionsReceived (${Object.keys(playerData.actionsReceived || {}).length} mecz√≥w)`);
          }
          
          if (hasMatchesInfo) {
            updates.matchesInfo = deleteField();
            addLog(`  ‚ùå Usuwam matchesInfo (${Object.keys(playerData.matchesInfo || {}).length} mecz√≥w)`);
          }
          
          const playerRef = doc(getDB(), 'players', playerId);
          await updateDoc(playerRef, updates);
          
          cleanedCount++;
          addLog(`  ‚úÖ Wyczyszczono zawodnika ${playerData.firstName} ${playerData.lastName}`);
        }
        
        processedCount++;
      }

      const results: CleanupStats = {
        totalPlayers: playersSnapshot.size,
        playersWithActionsSent: analysisResults.playersWithActionsSent,
        playersWithActionsReceived: analysisResults.playersWithActionsReceived,
        playersWithMatchesInfo: analysisResults.playersWithMatchesInfo,
        cleanedPlayers: cleanedCount,
        processedPlayers: processedCount
      };

      setCleanupResults(results);
      
      addLog('üéâ Czyszczenie zako≈Ñczone!');
      addLog(`üìä Przetworzono: ${processedCount} zawodnik√≥w`);
      addLog(`üßπ Wyczyszczono: ${cleanedCount} zawodnik√≥w`);
      addLog(`‚ú® Pomiƒôtych: ${processedCount - cleanedCount} zawodnik√≥w`);
      
      addLog('üíæ Korzy≈õci z czyszczenia:');
      addLog('‚Ä¢ Usuniƒôto duplikaty akcji kt√≥re by≈Çy przechowywane w matches');
      addLog('‚Ä¢ Usuniƒôto duplikaty minut zawodnik√≥w kt√≥re by≈Çy przechowywane w matches');
      addLog('‚Ä¢ Zmniejszono rozmiar dokument√≥w zawodnik√≥w');
      addLog('‚Ä¢ Upro≈õciono strukturƒô danych');
      addLog('‚Ä¢ Poprawiono wydajno≈õƒá zapyta≈Ñ');

    } catch (error) {
      console.error('B≈ÇƒÖd czyszczenia:', error);
      addLog(`‚ùå B≈ÇƒÖd czyszczenia: ${error}`);
    } finally {
      setIsCleaning(false);
    }
  };

  if (!isAdmin) {
    return (
      <div className={styles.container}>
        <h1>Brak uprawnie≈Ñ</h1>
        <p>Tylko administratorzy mogƒÖ korzystaƒá z panelu czyszczenia danych.</p>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <h1>üßπ Czyszczenie danych zawodnik√≥w</h1>
      
      <div className={styles.section}>
        <h2>Problem z duplikacjƒÖ danych</h2>
        <p>
          Wcze≈õniej akcje by≈Çy zapisywane w dw√≥ch miejscach:
        </p>
        <ul>
          <li><strong>matches/{`{matchId}`}.actions_packing[]</strong> - g≈Ç√≥wne ≈∫r√≥d≈Ço danych akcji (u≈ºywane w UI)</li>
          <li><strong>matches/{`{matchId}`}.playerMinutes[]</strong> - g≈Ç√≥wne ≈∫r√≥d≈Ço danych minut (u≈ºywane w UI)</li>
          <li><strong>players/{`{playerId}`}.actionsSent/actionsReceived</strong> - duplikaty akcji (nieu≈ºywane)</li>
          <li><strong>players/{`{playerId}`}.matchesInfo</strong> - duplikaty minut (nieu≈ºywane)</li>
        </ul>
        <p>
          Ten panel pozwala usunƒÖƒá niepotrzebne duplikaty z dokument√≥w zawodnik√≥w:
        </p>
        <ul>
          <li><strong>actionsSent/actionsReceived</strong> - duplikaty akcji</li>
          <li><strong>matchesInfo</strong> - duplikaty minut zawodnik√≥w</li>
        </ul>
      </div>

      <div className={styles.section}>
        <h2>Analiza danych</h2>
        <button
          onClick={analyzePlayerData}
          disabled={isAnalyzing}
          className={styles.button}
        >
          {isAnalyzing ? 'Analizujƒô...' : 'üîç Analizuj dane zawodnik√≥w'}
        </button>
        
        {analysisResults && (
          <div className={styles.results}>
            <h3>Wyniki analizy:</h3>
            <ul>
              <li>≈ÅƒÖcznie zawodnik√≥w: {analysisResults.totalPlayers}</li>
              <li>Zawodnicy z actionsSent: {analysisResults.playersWithActionsSent}</li>
              <li>Zawodnicy z actionsReceived: {analysisResults.playersWithActionsReceived}</li>
              <li>Zawodnicy z matchesInfo: {analysisResults.playersWithMatchesInfo}</li>
              <li>Status: {analysisResults.playersWithActionsSent === 0 && analysisResults.playersWithActionsReceived === 0 && analysisResults.playersWithMatchesInfo === 0 ? '‚úÖ Baza czysta' : '‚ö†Ô∏è Wymaga czyszczenia'}</li>
            </ul>
          </div>
        )}
      </div>

      <div className={styles.section}>
        <h2>Czyszczenie</h2>
        <button
          onClick={cleanupPlayerData}
          disabled={isCleaning || !analysisResults || (analysisResults.playersWithActionsSent === 0 && analysisResults.playersWithActionsReceived === 0 && analysisResults.playersWithMatchesInfo === 0)}
          className={`${styles.button} ${styles.dangerButton}`}
        >
          {isCleaning ? 'Czyszczƒô...' : 'üßπ Usu≈Ñ duplikaty akcji'}
        </button>
        
        {cleanupResults && (
          <div className={styles.results}>
            <h3>Wyniki czyszczenia:</h3>
            <ul>
              <li>Przetworzono: {cleanupResults.processedPlayers} zawodnik√≥w</li>
              <li>Wyczyszczono: {cleanupResults.cleanedPlayers} zawodnik√≥w</li>
              <li>Bez zmian: {cleanupResults.processedPlayers - cleanupResults.cleanedPlayers} zawodnik√≥w</li>
              <li>Status: ‚úÖ Czyszczenie zako≈Ñczone</li>
            </ul>
          </div>
        )}
      </div>

      <div className={styles.section}>
        <h2>Logi operacji</h2>
        <div className={styles.logs}>
          {logs.length === 0 ? (
            <p>Brak log√≥w - wykonaj analizƒô lub czyszczenie</p>
          ) : (
            logs.map((log, index) => (
              <div key={index} className={styles.logEntry}>
                {log}
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
} 